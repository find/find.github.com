Project Euler 题解第一页
========================

用 Julia_ 做 `Project Euler`_ 上的题目简直比作弊还简单 ...

1
---

找出 1000 以下 3 或 5 的倍数的和

不用讲解 - -

.. code:: julia

    println(sum(filter(i->i%3==0 || i%5==0, [3:999])))


2
---

斐波拉切数列的偶数项和

还是不用讲解 - -

.. code:: julia

    a = 1
    b = 2
    sum = 2
    while true
        c = a+b
        if c>4000000 then
            break
        end
        if c%2 == 0 then
            sum = sum + c
        end
        a = b
        b = c
    end

    println(sum)


3
---

600851475143 的最大质数因子

对于 julia 这么一种 IMBA 的语言 …… 还是不用讲解

.. code:: julia

    v = 600851475143
    println(maximum([f[1] for f in factor(v)]))

4
---

找出三位数相乘组成的最大回文数

依然不用讲解

.. code:: julia

    isPalindrome(s::String) =
        if length(s)>2 
            s[1]==s[end] && isPalindrome(s[2:end-1])
        else
            s[1] == s[end]
        end
    isPalindrome(i::Int) = isPalindrome(string(i))
    println(maximum(filter(isPalindrome, [a*b for a in 100:999, b in 100:999])))

5
---

1 .. 20 的最小公倍数

.. code:: julia

    println(lcm([1:20]...))

6
---

1 .. 100 和的平方与平方和的差

.. code:: julia

    println(sum([1:100])^2 - sum(map(x->x^2, [1:100])))

7
---

第 10001 个质数是什么呢

.. code:: julia

    println(primes(500000)[10001])

8
---

在那一串数字中找到最大的五个连续的数字的积 ……

.. code:: julia

    s = replace(
    "
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    "
    , r"\s", "")

    v = 0
    for i in 5:length(s)
        v = max( v, reduce((x, c)->x*(c-'0'), 1, s[i-4:i]) )
    end

    println(v)

9
---

找到满足 a^2 + b^2 == c^2 且 a + b + c == 1000 的 a, b, c

.. code:: julia

    for a in [1:999]
        for b in [a:999]
            if a+b > 1000
                continue
            end
            for c in [b:999]
                s = a + b + c
                if s > 1000
                    break
                end
                if a^2 + b^2 == c^2 && a + b + c == 1000
                    println("$a * $b * $c = $(a*b*c)")
                    exit(0)
                end
            end
        end
    end

10
---

求 2000000 以下的质数的和

.. code:: julia

    println(sum(primes(2000000-1)))

11
---

求一个矩阵中沿某一方向连续的四个数的最大乘积

.. code:: julia

    m = [
    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    ]
    d = 20 # dimension

    v = 0
    for r in [4:d]
        for c in [4:d]
            v = max(v,
                prod(m[r , c-3:c]),
                prod(m[r-3:r , c]),
                m[r , c] * m[r-1 , c-1] * m[r-2 , c-2] * m[r-3 , c-3],
                m[r , c-3] * m[r-1 , c-2] * m[r-2 , c-1] * m[r-3 , c]
            )
        end
    end
    println(v)

12
---

求因数的数量 // 即质因数的组合方式个数

精髓在这一句 ``reduce((a, f)->a * (f[2]+1), 1, factor(t))``

``factor(x)`` 返回 ``x`` 的质因数及其次数列表

.. code:: julia

    t = 0
    for i in 1:100000
        t = t+i
        if reduce((a, f)->a * (f[2]+1), 1, factor(t))>500
            println(t)
            break
        end
    end

13
---

求一串大数的和

.. code:: julia

    nums = map(BigInt,[
    "37107287533902102798797998220837590246510135740250"
    ...
    "53503534226472524250874054075591789781264330331690"
    ])
    s = string(sum(nums))
    println(s[1:10])

14
---

求使得 3n+1 数列最长的起点

――本该用 DP 做的 …… 不过既然直接算时间也能接受 …… 那就不管了

.. code:: julia

    function chainlen(n)
        function f(x)
            if x%2 == 0
                return x/2
            else
                return 3x + 1
            end
        end

        l = 0
        while true
            l = l+1
            if n==1
                break
            end
            n = f(n)
        end
        return l
    end

    n, l = 1, 1
    for i in 3:1000000-1
        cl = chainlen(i)
        if cl>l
            n, l = i, cl
        end
    end

    println(n)

15
---

求在 20x20 的格子上从一个角走到对角不走回头路的路径个数

从一行 n 列开始递推 n 行 n 列的情况就很明确了

需要留意的是 20x20 的格子有 21x21 行列 - -|||

.. code:: julia

    row = [1 for i in 1:21]
    nextrow = [1 for i in 1:21]

    for i in 1:20
        for j in 2:21
            nextrow[j] = nextrow[j-1] + row[j]
        end
        row, nextrow = nextrow, row
        # println(row)
    end

    println( row[21] )


// 困了，明天继续

.. _Julia: http://julialang.org/
.. _`Project Euler`: http://projecteuler.net
